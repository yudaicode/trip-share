// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  avatar        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  tripSchedules TripSchedule[]
  likes         Like[]
  comments      Comment[]
}

model TripSchedule {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  coverImage  String?
  category    String
  isPublic    Boolean       @default(true)
  likes       Like[]
  comments    Comment[]
  daySchedules DaySchedule[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model DaySchedule {
  id             String       @id @default(cuid())
  tripScheduleId String
  tripSchedule   TripSchedule @relation(fields: [tripScheduleId], references: [id], onDelete: Cascade)
  dayNumber      Int
  date           DateTime
  title          String
  activities     Activity[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Activity {
  id            String      @id @default(cuid())
  dayScheduleId String
  daySchedule   DaySchedule @relation(fields: [dayScheduleId], references: [id], onDelete: Cascade)
  time          String
  title         String
  location      String
  description   String
  images        String      @default("[]")
  cost          Float?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Like {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  tripScheduleId String
  tripSchedule   TripSchedule @relation(fields: [tripScheduleId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  
  @@unique([userId, tripScheduleId])
}

model Comment {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  tripScheduleId String
  tripSchedule   TripSchedule @relation(fields: [tripScheduleId], references: [id], onDelete: Cascade)
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
